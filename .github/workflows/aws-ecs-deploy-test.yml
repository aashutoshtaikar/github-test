name: Build and Deploy to ECS

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Build with Maven
      run: mvn clean install

    - name: Persist artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: nothing-app-artifact
        path: target/nothing-app-0.0.1-SNAPSHOT.jar

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: nothing-app-artifact
        path: ${{ runner.workspace }}/target
        
    - name: Build and Push Docker Image
      run: |
        ls Dockerfile
        ls -latr
        pwd
        cp Dockerfile ${{ runner.workspace }}/target/
        cd ${{ runner.workspace }}/target
        ls -latr
        docker build --no-cache -t nothing-app-docker-image .
        docker tag nothing-app-docker-image:latest 639235717884.dkr.ecr.us-east-1.amazonaws.com/nothing-app-docker-image:latest
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 639235717884.dkr.ecr.us-east-1.amazonaws.com
        docker push 639235717884.dkr.ecr.us-east-1.amazonaws.com/nothing-app-docker-image:latest

    - name: Deploy to ECS
      run: |
        ecs-cli configure --region us-east-1 --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --cluster DevCluster --default-launch-type EC2 --config-name your-ecs-cli-config-name
        ecs-cli compose --project-name your-ecs-project-name service up --container-name your-container-name --container-port 8080
